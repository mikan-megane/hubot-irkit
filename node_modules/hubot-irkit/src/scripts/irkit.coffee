# Description:
#   Control IRKit the hackable remote controller.
#
# Commands:
#   hubot ir list devices - List IRKit device
#   hubot ir list messages for <device_name> - List IR messages
#   hubot ir ls - List IRKit device
#   hubot ir ls msg for <device_name> - List IR messages
#   hubot ir reg <client_token> <client_name> - Register IRKit device
#   hubot ir reg msg <message_name> for <device_name> - Register IR message
#   hubot ir register device <client_token> <client_name> - Register IRKit device
#   hubot ir register message <message_name> for <device_name> - Register IR message
#   hubot ir send <message_name> for <device_name> - Send IR message
#   hubot ir send message <message_name> for <device_name> - Send IR message
#   hubot ir show <client_name> - Show IRKit device
#   hubot ir unreg <client_name> - Unregister IRKit device
#   hubot ir unreg msg <message_name> for <device_name> - Unregister IR message
#   hubot ir unregister device <client_name> - Unregister IRKit device
#   hubot ir unregister message <message_name> for <device_name> - Unregister IR message
#   hubot 登録 [on|off|up|down|0~99],<名前> - 信号を記憶します。
#   hubot 一覧 - 記憶した信号を表示します。
#   hubot <名前>をつけてor点けてorにして - 記憶した信号を送信します。
#
# Configuration:
#   HUBOT_IRKIT_HTTP=1
#   HUBOT_IRKIT_HTTP_METHOD=(GET|POST|PUT|DELETE)
cronJob = require('cron').CronJob
module.exports = (robot) ->

  getDevices = ->
    robot.brain.data.irkitDevices ||= {}

  getDevice = (msg, name, silent = no)->
    devices = getDevices()
    if !(device = devices[name]) && !silent && msg
      msg.send "Device: #{name} is not registered."
    device

  getMessage = (msg, deviceName, messageName, silent = no)->
    if device = getDevice msg, deviceName
      device.messages ||= {}
      if !(message = device.messages[messageName]) && !silent && msg
        msg.send "エラー: #{messageName} は登録されていないかスペルが違います。"
    message

  hankaku_int = (text) ->
    text.replace(/[０-９]/g, (s)->
      String.fromCharCode(s.charCodeAt(0)-0xFEE0) )

  old_msg = ""

  robot.hear /\s*ir(?:kit)?\s+reg(?:ister)?(?:\s+(?:dev|device))?\s+([^\s]+)\s+([^\s]+)\s*$/i, (msg) ->
    devices = getDevices()
    clienttoken = msg.match[1]
    name = msg.match[2]
    unless /^([0-9a-f]+)$/i.test clienttoken
      msg.send "Invalid client token: #{clienttoken}"
      return
    if getDevice msg, name, yes
      msg.send "Device: #{name} is already registered."
      return
    msg.send "Registering client: #{clienttoken} as #{name}..."
    robot.http('https://api.getirkit.com/1/keys')
      .header('Content-Type', 'application/json')
      .post(JSON.stringify { clienttoken }) (err, res, body) ->
        try json = JSON.parse body
        unless json
          msg.send "Failed to register device (status:#{res.statusCode})"
          return
        {deviceid, clientkey} = json
        devices[name] = { deviceid, clientkey, clienttoken }
        robot.brain.save()
        msg.send "Device: #{name} is successfully registered."

  robot.hear /\s*ir(?:kit)?\s+unreg(?:ister)?(?:\s+(?:dev|device))?\s+([^\s]+)\s*$/i, (msg) ->
    devices = getDevices()
    name = msg.match[1]
    return unless getDevice msg, name
    delete devices[name]
    robot.brain.save()
    msg.send "Device: #{name} is successfully unregistered."

  robot.hear /\s*ir(?:kit)?\s+(?:list|ls)(?:\s+dev(?:ices)?)?\s*$/i, (msg) ->
    devices = getDevices()
    deviceNames = Object.keys devices
    if deviceNames.length > 0
      msg.send "#{ deviceNames.join("\n") }"
    else
      msg.send "No devices registered."

  robot.hear /\s*ir(?:kit)?\s+show\s+(?:device\s+)?([^\s]+)\s*$/i, (msg)->
    devices = getDevices()
    name = msg.match[1]
    if device = getDevice msg, name
      msg.send JSON.stringify device, null, 2

  robot.hear /\s*(?:登録|とうろく)\s*((?:on|off|up|down|[0-9]{1,2}),.+)\s*$/i, (msg) ->
    messageName = msg.match[1]
    deviceName = 'home'
    return unless device = getDevice msg, deviceName
    if getMessage msg, deviceName, messageName, yes
      msg.send "Message: #{messageName} for #{deviceName} is already registered."
      return
    msg.send "IRkitに向かって登録したいボタンを押してください。"
    robot.http("https://api.getirkit.com/1/messages?clientkey=#{device.clientkey}&clear=1")
      .header('Content-Type', 'application/json')
      .get() (err, res, body) ->
        try json = JSON.parse body
        unless message = json?.message
          if res.statusCode == 200
            msg.send "タイムアウトしました。"
          else
            msg.send "登録に失敗しました。 (status:#{res.statusCode})"
          return
        device.messages[messageName] = message
        robot.brain.save()
        msg.send "#{messageName} を #{deviceName} に登録しました。"

  robot.hear /\s*([^\s]+?)を?忘れて\s*$/i, (msg) ->
    messageName = msg.match[1]
    deviceName = 'home'
    return unless device = getDevice msg, deviceName
    return unless getMessage msg, deviceName, messageName
    delete device.messages[messageName]
    robot.brain.save()
    msg.send "#{messageName}を忘れました。"

  robot.hear /\s*一覧\s*$/i, (msg) ->
    old_msg = msg
    deviceName = 'home'
    return unless device = getDevice msg, deviceName
    messageNames = Object.keys device.messages || {}
    if messageNames.length > 0
      msg.send "#{ messageNames.join("\n") }"
    else
      msg.send "No messages registered for #{deviceName}."

  sendIRMessage = (msg, deviceName, messageName, callback)->
    return no unless device = getDevice msg, deviceName
    return no unless message = getMessage msg, deviceName, messageName
    {clientkey, deviceid} = device
    messageEncoded = encodeURIComponent JSON.stringify message
    msg?.send "送信しています・・・"
    robot.http('https://api.getirkit.com/1/messages')
      .header('Content-Type', 'application/x-www-form-urlencoded')
      .post("deviceid=#{deviceid}&clientkey=#{clientkey}&message=#{messageEncoded}") callback
    yes

  robot.hear /\s*([^\s]+?)を?(?:つけて|点けて)\s*$/i, (msg) ->
    messageName = 'on,' + msg.match[1]
    deviceName = 'home'
    sendIRMessage msg, deviceName, messageName, (err, res, body) ->
      if res?.statusCode == 200
        msg.send "完了しました。"
      else
        msg.send "送信できませんでした。"
  robot.hear /\s*([^\s]+?)を?(?:消して|けして)\s*$/i, (msg) ->
    messageName = 'off,' + msg.match[1]
    deviceName = 'home'
    sendIRMessage msg, deviceName, messageName, (err, res, body) ->
      if res?.statusCode == 200
        msg.send "完了しました。"
      else
        msg.send "送信できませんでした。"
  robot.hear /\s*([^\s]+?)を?(?:上げて|明るくして)\s*$/i, (msg) ->
    messageName = 'up,' + msg.match[1]
    deviceName = 'home'
    sendIRMessage msg, deviceName, messageName, (err, res, body) ->
      if res?.statusCode == 200
        msg.send "完了しました。"
      else
        msg.send "送信できませんでした。"
  robot.hear /\s*([^\s]+?)を?(?:下げて|暗くして)\s*$/i, (msg) ->
    messageName = 'down,' + msg.match[1]
    deviceName = 'home'
    sendIRMessage msg, deviceName, messageName, (err, res, body) ->
      if res?.statusCode == 200
        msg.send "完了しました。"
      else
        msg.send "送信できませんでした。"
  robot.hear /\s*([^\s]+?)を?([0-9]{0,2}|[０-９]{0,2})(?:にして)\s*$/i, (msg) ->
    if msg.match[2].length == 0 
      messageName = 'on,' + msg.match[1]
    else
      mat2 = hankaku_int msg.match[2]
      messageName = mat2 + ',' + msg.match[1]
    deviceName = 'home'
    sendIRMessage msg, deviceName, messageName, (err, res, body) ->
      if res?.statusCode == 200
        msg.send "完了しました。"
      else
        msg.send "送信できませんでした。"

  if /^(1|true)$/.test process.env.HUBOT_IRKIT_HTTP?.toString()
    method = process.env.HUBOT_IRKIT_HTTP_METHOD?.toUpperCase()
    unless /^(GET|POST|PUT|DELETE)$/.test method
      robot.log.warn "Unknown HTTP method #{method}. Using GET." if method?
      method = 'GET'
    robot.router[method.toLowerCase()] '/irkit/messages/:deviceName/:messageName', (httpReq, httpRes) ->
      { deviceName, messageName } = httpReq.params
      sent = sendIRMessage null, deviceName, messageName, (err, res, body) ->
        if res?.statusCode == 200
          httpRes.send 'OK'
        else
          httpRes.statusCode = 404
          httpRes.send 'NG'
      unless sent
        httpRes.statusCode = 404
        httpRes.send 'NG'

  new cronJob( '0 0,30 20,21,22,23,0 * * *', () ->
    sendIRMessage old_msg, 'home', 'down,電気', (err, res, body) ->
      if res?.statusCode == 200
        robot.messageRoom 'cron', "電気を暗くしました"
      else
        robot.messageRoom 'cron', "電気を暗くできませんでした。"
  ).start()

  new cronJob( '0 1 21,22,23,0 * * *', () ->
    sendIRMessage old_msg, 'home', 'down,にこの電気', (err, res, body) ->
      if res?.statusCode == 200
        robot.messageRoom 'cron', "にこの電気を暗くしました"
      else
        robot.messageRoom 'cron', "にこの電気を暗くできませんでした。"
  ).start()